---
title: 'Assignment 6: Debugging and Database'
author: "STA3005 Statistical Computing"
date: 'Due date: May 9, 23:59'
output:
  pdf_document: default
  html_document:
    df_print: paged
---

```{r, include = FALSE}
knitr::opts_chunk$set(cache = FALSE, autodep = FALSE, cache.comments = FALSE)

```

```{r, include = FALSE}
# A hook to wrap output based on a linewidth chunk option.
# From https://github.com/yihui/knitr-examples/blob/master/077-wrap-output.Rmd
library(knitr)
hook_output = knit_hooks$get('output')
knit_hooks$set(output = function(x, options) {
  # This hook is used only when the linewidth option is not NULL.
  if (!is.null(n <- options$linewidth)) {
    x = knitr:::split_lines(x)
    # Any lines wider than n should be wrapped.
    if (any(nchar(x) > n)) x = strwrap(x, width = n)
    x = paste(x, collapse = '\n')
  }
  hook_output(x, options)
})
opts_chunk$set(cache = TRUE, autodep = TRUE, cache.comments = TRUE, linewidth = 79)

library(assertthat)

```

-   Name: **Vincent Boer**
-   Student ID: **123040049**
-   Collaborated with: **YOUR PARTNER**

You can collaborate with your classmates, but you must identify their names above, and you must submit **your own** assignment as an knitted (complied) PDF (or html) file and rmd file on blackboard system.

# Q1. Bug hunt practice (15 points)

In this section of the assignment, you will fix a bunch of buggy function definitions. Probably the easiest workflow is to define the function in your console, and then run the sample commands---they will either give errors or produce the wrong outputs. Using any combination of: reading the error messages, `traceback()`, and `cat()` or `print()`, you must find and fix the bugs. Sometimes it can also help to try multiple different inputs, i.e., try new function calls, rather than just looking at the sample calls given to you, in order to determine the bugs. You shouldn't show any of your debugging work in your final knitted answers---so, don't show calls to `traceback()`, and don't leave any `cat()` or `print()` calls in the final, fixed function.

-   **1a.** (5 points) Below is a function called `get.cols.with.ab.zeros()`, but it has a few bugs. A few sample matrices are given below in `mat`, `identity.mat`, along with some sample calls that give errors. After fixing the bugs, the calls to `get.cols.with.ab.zeros()` should produce the outputs as described in comments. Please write down all bugs and explain how to fix respectively.

```{r q1a}
# MODIFY THE FOLLOWING FUNCTION

# Function: cols.with.ab.zeros, to retrieve columns of matrix that have between
# a and b zeros.
# Inputs:
# - my.mat: the original matrix;
# - a: lower bound for number of zeros allowed; default is 0.
# - b: upper bound for number of zeros allowed; default is Inf.
# Output: the new matrix;

cols.with.ab.zeros = function(my.mat, a = 0, b = Inf) {
  # Before it was "zeros.per.column = colSums(mat == 0)". It should be "my.mat" 
  # instead of "mat".
  zeros.per.column = colSums(my.mat == 0)
  i.to.keep = a <= zeros.per.column & zeros.per.column <= b
  # Before it was "return(my.mat[i.to.keep, ]))" which returns rows based on index of
  # columns that satisfy the number of zeros. The columns should be returned instead,
  # within as.matrix() function to keep the matrix form.
  return(as.matrix(my.mat[, i.to.keep]))
}

mat = matrix(c(0, 0, 1, 0, 1, 1, 1, 1, 1), 3, 3)
identity.mat = diag(1, 3)

# Should get back original matrix.
cols.with.ab.zeros(mat) 

# Should get back first 2 columns of mat.
cols.with.ab.zeros(mat, a = 1, b = 2) 

# Should get just 1st column of mat. 
# Note this should still be a matrix though, and not a numeric vector!
cols.with.ab.zeros(mat, a = 2, b = 2) 

 # Should get back original matrix.
cols.with.ab.zeros(identity.mat, a = 2, b = 2)

```

-   **1b.** (5 points) Below is a function called `list.extractor()`, but it has a few bugs. A sample list is given below in `cool.list`, along with some sample calls that give errors. After fixing the bugs, the calls to `list.extractor()` should produce the outputs as described in comments.

```{r q1b}
# MODIFY THE FOLLOWING FUNCTION

# Function: list.extractor, to extract elements of a list.
# Inputs:
# - my.list: the original list;
# - i.to.keep: vector of indices, corresponding to elements of the list we
#   want to keep. Default is NULL, in which case this argument is ignored.
# - i.to.remove: vector of indices, corresponding to elements of the list we
#   want to remove Default is NULL, in which case this argument is ignored.
#   NOTE: if both i.to.keep and i.to.remove are non-NULL, then the first
#   one should take precedence (i.e., we don't remove anything).
# Output: the new list

list.extractor = function(my.list, i.to.keep = NULL, i.to.remove = NULL) {
  if (!is.null(i.to.keep)) {
    L = my.list[i.to.keep]
  }
  else if (!is.null(i.to.remove)) {
    L = my.list[-i.to.remove]
  }
  return(L)
}

cool.list = list(ints = 1:10, lets = letters[1:8], fracs = (1:7) / 7,
                 bools = sample(c(TRUE,FALSE), 5, replace = TRUE))

# Should get list with ints and fracs.
list.extractor(cool.list, i.to.keep = c(1, 3)) 

# Should get list without bools.
list.extractor(cool.list, i.to.remove = 4) 

# Should get list with lets, fracs, and bools (the i.to.remove argument should be ignored)
list.extractor(cool.list, i.to.keep = 2:4, i.to.remove = 4) 

```

-   **1c.** (5 points) Below is a function called `random.walk()`, but it has a few bugs. Some sample calls are given below that produce errors. After fixing the bugs, the calls to `random.walk()` should produce the outputs as described in comment.

```{r q1c}
# MODIFY THE FOLLOWING FUNCTION

# Function: random.walk, to run a simple random walk over the reals, which
# terminates when it reaches 0.
# Inputs:
# - x.start: starting position; Default is 5.
# - plot.walk: should the result be plotted? Default is TRUE.
# - seed: integer seed to pass to set.seed(). Default is NULL, which means
#   effectively no seed is set.
# Output: a list with elements x.vals, the values visited by the random walk,
# and num.steps, the number of steps taken before termination.

random.walk = function(x.start = 5, plot.walk = TRUE, seed = NULL) {
  # Q3a.
  assert_that(length(x.start) == 1 && is.numeric(x.start), 
              msg = "x.start is not a number")
  assert_that(length(plot.walk) == 1 && is.logical(plot.walk), 
              msg = "plot.walk must be TRUE of FALSE")
  assert_that(length(seed) == 1 && is.numeric(seed), msg = "seed is not a number")
  # Set the seed, if we need to
  if (!is.null(seed)) {
    set.seed(seed)
  }
  
  x.vals = x.start
  while (TRUE) {
    r = runif(1, -2, 1)
    if (tail(x.vals, 1) + r <= 0) {
      # If the number of steps taken before and including during termination
      # add "x.vals = c(x.vals, tail(x.vals, 1) + r)" before "break"
      break
    } 
    else {
      x.vals = c(x.vals, tail(x.vals, 1) + r)
    }
  }
  
  if (plot.walk) {
    plot(x.vals, xlab = "Iteration", ylab = "Random Walk Values", type = "o")
  }
  return(list(x.vals = x.vals, num.steps = length(x.vals)))
}

# Should print 8 (this is how many steps it took the random walk), and produce a plot.
random.walk(x.start = 5, seed = 3)$num.steps 

# Should print 14 (this is how many steps it took the random walk), and produce a plot
random.walk(x.start = 10, seed = 7)$num.steps 

# Should print 14 (this is how many steps it took the random walk), and not produce a plot
random.walk(x.start = 10, plot.walk = FALSE, seed = 7)$num.steps

```

# Q2. Browsing for bugs (18 points)

-   **2a.** (5 points) Use `browser()` to find and fix bugs in the function `fibonacci()` below. This function is supposed to generate the $n$th number in the Fibonacci sequence 1, 1, 2, 3, 5, 8, 13, 21, 34, ..., which begins with 1, 1, and where every number after this is the sum of the previous two. Describe what bugs you found, how you found them, and what you did to fix them. Once this is done, your function should be producing outputs on the test cases below that match those described in the comments. Write down the bugs and explain how to fix them.

```{r q2a}
fibonacci = function(n) {
  my.fib = c(1, 1)
  if (n > 2) {
    for (i in 2:(n - 1)) {
      my.fib[i + 1] = my.fib[i] + my.fib[i - 1]
    }
  }
  return(my.fib[n])
}

# First bug I noticed is the use of "i" outside of the loop which is obviously wrong.
# So, I change it to "n", to return the "n"th number of the sequence.
# Second, I noticed the use of "i in 2:(n - 1)" to indicate the index of the Fibonacci 
# sequence and "my.fib[i + 1] = my.fib[i] + my.fib[i - 1]" to calculate the sequences
# starting from index 3. However, 2:(n - 1) is decreasing for "n" smaller than or equal 
# to 2. Thus, it has to be specified that this loop works only if "n" is larger than 2.

fibonacci(1)
fibonacci(2) 
fibonacci(3) 
fibonacci(5)
fibonacci(9) 

```

-   **2b.** (5 points) Use `browser()` to find and fix bugs in the functions `sentence.flipper()` and `word.flipper()` below. The first function is supposed to take a sentence, i.e., a single string composed of words separated by spaces, and flip each of the words (meaning reverse the order of their characters); the second function is used by the first, to take a single word and flip it (reverse the order of the characters). Describe what bugs you found, how you found them, and what you did to fix them. Once this is done, your function should be producing outputs on the test cases below that match those described in the comments. Write down the bugs and explain how to fix them.

```{r q2b}
sentence.flipper = function(str) {
  # The "strsplit(str, split = " ")" split into a list of one vector of the
  # words. As only the vector of string is needed, the list format is discarded.
  str.words = strsplit(str, split = " ")[[1]]
  # The "lapply" was done on "str" instead of "str.words" and "lapply" returns a list
  # instead of a vector. So "lapply" is switched to "tapply', and "str" to "str.words".
  rev.words = sapply(str.words, word.flipper)
  str.flipped = paste(rev.words, collapse = " ")
  return(str.flipped)
}

word.flipper = function(str) {
  # Similar to in "sentence.flipper", only the vector of chars is needed, so the list
  # format is discarded.
  chars = strsplit(str, split = "")[[1]]
  chars.flipped = c()
  if (chars[length(chars)] == ",") {
    chars.flipped = rev(chars[-length(chars)])
    chars.flipped = c(chars.flipped, ",")
  }
  else {
    chars.flipped = rev(chars)
  }
  str.flipped = paste(chars.flipped, collapse = "")
  return(str.flipped)
}

# Should be "eht kciuq nworb xof depmuj revo eht yzal god"
sentence.flipper("the quick brown fox jumped over the lazy dog")

# Should be "ot eb ro on ot eb taht si eht noitseuq"
sentence.flipper("to be or no to be that is the question")

```

-   **2c.** (4 points) Extend the function `sentence.flipper()` so that it is vectorized, i.e., if the input `str` is a vector of strings, then this function should return a vector where each element is a string that is flipped in accordance with the description above. Hint: there is certainly more than one way to modify `sentence.flipper()` so that it works over vectors. But look out for a simple strategy---you already know that `sentence.flipper()` works over single strings, so now just do something to apply this strategy over each element of a vector. Once this is done, your function should be producing outputs on the test cases below that match those described in the comments.

```{r q2c}
# Redefine sentence.flipper() here
sentence.flipper = function(str) {
  assert_that(is.character(str), msg = "str is not of character class")
  strs.flipped = sapply(str, function(s) {
    s.words = strsplit(s, split = " ")[[1]]
    rev.words = sapply(s.words, word.flipper)
    s.flipped = paste(rev.words, collapse = " ")
    return(s.flipped)
  })
  names(strs.flipped) = c()
  return(strs.flipped)
}

# Should be "olleh ssenkrad ym tseb dneirf",
# "ev'i emoc ot kaeps htiw uoy niaga"
sentence.flipper(c("hello darkness my best friend",
                   "i've come to speak with you again"))

# Should be "reven annog evig uoy pu",
# "reven annog tel uoy nwod",
# "reven annog nur dnuora dna tresed uoy"
sentence.flipper(c("never gonna give you up",
                   "never gonna let you down",
                   "never gonna run around and desert you"))

```

-   **2d.** (4 points) Define a function `sentence.scrambler()` that operates similarly to to `sentence.flipper()`, but which randomly scrambles the order of characters in each word, instead of deterministically reversing them. The function `sentence.scrambler()` should be vectorized, just like the current version of `sentence.flipper()`. Hint: you can use `browser()` at any point if you run into bugs in your development, or simply to see how your function is handling certain test inputs. Also, the implementation of `sentence.scrambler()` should be pretty similar to `sentence.flipper()`; really, you just need to replace `word.flipper()` by a suitable function. Once done, run `sentence.scrambler()` on the test string below to display the output.

```{r q2d}
sentence.scrambler = function(str) {
  strs.flipped = sapply(str, function(s) {
    s.words = strsplit(s, split = " ")[[1]]
    rev.words = sapply(s.words, word.scrambler)
    s.flipped = paste(rev.words, collapse = " ")
    return(s.flipped)
  })
  names(strs.flipped) = c()
  return(strs.flipped)
}

word.scrambler = function(str) {
  chars = strsplit(str, split = "")[[1]]
  chars.flipped = c()
  if (chars[length(chars)] == ",") {
    chars.flipped = sample(chars[-length(chars)], size = length(chars) - 1, replace = FALSE)
    chars.flipped = c(chars.flipped, ",")
  }
  else {
    chars.flipped = sample(chars, size = length(chars), replace = FALSE)
  }
  str.flipped = paste(chars.flipped, collapse = "")
  return(str.flipped)
}

sentence.scrambler(c("I have no theorems, well",
  "I do have theorems, but none of them are named Fienberg's Theorem",
  "Even if there were a Fienberg's Theorem, it probably wouldn't be important",
  "What's important is the attitude, for what statistics is",
  "and how it's recognized by other people outside of our field"))

```

# Q3. Testing practice (12 points)

-   **3a.** (2 points) Download and install the `assertthat` package, if you haven’t already. Using the assert_that(), add assertions to the start of your (final, bug-fixed) random.walk() function from from Q1c to ensure that the inputs being passed in are of the correct type. Demonstrate by example that these work and pass informative error messages by calling random.walk() with faulty inputs.

```{r q3a, error = TRUE}
random.walk("lol", 12, FALSE)
random.walk(1, 12, FALSE)
random.walk(1, FALSE, FALSE)
random.walk(c(1, 2), FALSE, FALSE)
random.walk(2, c(TRUE, FALSE), FALSE)
random.walk(2, TRUE, c(2, 3))

```

-   **3b.** (2 points) Similarly, add assertions to sentence.flipper() from Q2c to ensure proper inputs, and then demonstrate via examples that these work as expected.

```{r q3b, error = TRUE}
sentence.flipper(c(2, 4, 5))
sentence.flipper(TRUE)

```

-   **3c.** (3 points) Now for a bit of unit testing. Implement your own unit tests for `sentence.flipper()` from Q2c. Write several tests, checking that it flips simple sentences as you'd expect, that it returns a vector of strings when it's passed a vector of strings, and that its output vector has the same length as the input vector.

```{r q3c}
library(testthat)
input = c("I want to eat", "Mala tang", "Cha shao fan")

test_that("sentence.flipper() flips simple sentences as expected", {
  test = sentence.flipper(input[1])
  expect_true(identical(test, c("I tnaw ot tae")))
})

test_that("sentence.flipper() returns a vector of strings when it's passed a vector
  of strings", {
  test = sentence.flipper(input)
  expect_true(is.character(input) && is.character(test))
})

test_that("sentence.flipper() output vector has the same length as its input vector", {
  test = sentence.flipper(input)
  expect_true(length(test) == length(input))
})

```

-   **3d.** (5 points) Write a sensible unit test for `sentence.scrambler()`. Because its behavior is random, you can't exactly predict what it should do on simple strings (like you could with `sentence.flipper()`), but that doesn't mean you can't write a sensible unit test. Hint: after scrambling the order of the letters in each word, think about what would be preserved, before and after scrambling ...

```{r q3d}
test_that("sentence.scrambler() returns a vector of strings when it's passed a vector
  of strings", {
  test = sentence.scrambler(input)
  expect_true(is.character(input) && is.character(test))
})

test_that("sentence.scrambler() output vector has the same length as its input vector", {
  test = sentence.scrambler(input)
  expect_true(length(test) == length(input))
})

test_that("Number of characters of each word of each string that sentence.scrambler() 
  returns has the same length to its given input ", {
  test = unlist(sapply(strsplit(sentence.scrambler(input), split = " "), function(x) {
    return(sapply(x, nchar))
  }))
  hypo = unlist(sapply(strsplit(input, split = " "), function(x) {
    return(sapply(x, nchar))
  }))
  expect_true(sum(hypo == test) == length(hypo))
})

test_that("Composition of characters of each word of the first string that 
  sentence.scrambler() returns is the same according to the given input ", {
  test = data.frame(rbind(strsplit(sentence.scrambler(input), split = " ")[[1]], 
                   strsplit(input, split = " ")[[1]]))
  expect_true(sum(sapply(test, function(x) {
    # To help visualize the test
    # print(strsplit(x[1], split = "")[[1]])
    # print(strsplit(x[2], split = "")[[1]])
    return(identical(sort(strsplit(x[1], split = "")[[1]]), 
                     sort(strsplit(x[2], split = "")[[1]])))
  })) == length(strsplit(input, split = " ")[[1]]))
})

```

# Lahman baseball database

Thanks to Sean Lahman, extensive baseball data is freely available all the way back to the 1871 season. We're going ot use a SQLite version of the baseball database put together by Jeff Knecht, at <https://github.com/jknecht/baseball-archive-sqlite>. The SQLite database was recently updated to include the 2016 season. Please download the database from the blackboard (it's about 50 MB) and save it in the working directory for your assignment.

```{r}
library(DBI)
library(RSQLite)
drv = dbDriver("SQLite")
con = dbConnect(drv, dbname = "lahman2016.sqlite")

```

# Q4. Practice with SQL data extraction (16 points)

-   **4a.** (2 points) Install the packages `DBI`, `RSQLite` if you haven't done so already, and load them into your R session. Using `dbDriver()`, `dbConnect()`, set up a connection called `con` the SQLite database stored in lahman2016.sqlite. Then, use `dbListTables()` to list the tables in the database.

```{r q4a}
dbListTables(con)

```

-   **4b.** (2 points) Using `dbReadTable()`, grab the table named "Batting" and save it as a data frame in your R session, called `batting`. Check that `batting` is indeed a data frame, and that it has dimension 102816 x 24.

```{r q4b}
batting = dbReadTable(con, "Batting")

class(batting)
dim(batting)

rownames(batting) = NULL

```

-   **4c.** (8 points) For each SQL query (each call to `dbGetQuery()`) below, explain in words what is being extracted, and write one line of base R code (sometimes you might need two lines) to get the same result using the `batting` data frame.

```{r}
dbGetQuery(con, paste("SELECT playerID, yearID, AB, H, HR",
                      "FROM Batting",
                      "ORDER BY HR DESC",
                      "LIMIT 5"))

# The player ID, year ID, At-bat, hit, and home runs information of 5 players with 
# the highest home run count in descending order.

```

```{r q4c2}
head(data.frame(batting[order(-batting$HR), c("playerID", "yearID", "AB", "H", "HR")], 
                 row.names = NULL), 5)

# Used data.frame() to reset the row index and returns TRUE when compared using
# identical().

```

```{r}
dbGetQuery(con, paste("SELECT playerID, yearID, AB, H, HR",
                      "FROM Batting",
                      "WHERE yearID >= 1990 AND yearID <= 2000",
                      "ORDER BY HR DESC",
                      "LIMIT 5"))

# The player ID, year ID, At-bat, hit, and home runs information of 5 players with 
# the highest home run count in descending order where the yearID is inclusively between 
# 1990 and 2000.

```

```{r q4c4}
head(data.frame(subset(batting[order(-batting$HR), 
                               c("playerID", "yearID", "AB", "H", "HR")], 
                       (yearID >= 1990 & yearID <= 2000)), row.names = NULL), 5)

```

-   **4d.** (4 points) Perform the same computations in the last question, but now using `dplyr` verbs and pipes.

```{r q4d}
library(dplyr)

batting %>%
  select(playerID, yearID, AB, H, HR) %>%
  arrange(desc(HR)) %>%
  head(5)

batting %>%
  select(playerID, yearID, AB, H, HR) %>%
  arrange(desc(HR)) %>%
  filter(yearID >= 1990 & yearID <= 2000) %>%
  head(5)

```

# Q5. Practice with SQL computations (12 points)

-   **5a.** (6 points) As before, remove `eval = FALSE` from the preamble in the following R code chunks. Then, after each SQL query, explain in words what is being extracted, and write one line of base R code to get the same result using the `batting` data frame. Hint: often you'll have to use `na.rm = TRUE` to deal with NA values, for example `mean(x, na.rm = TRUE)` computes the mean of a vector `x` after removing any NA values.

```{r}
dbGetQuery(con, paste("SELECT AVG(HR)",
                      "FROM Batting"))

# The average number of home runs from the data.

```

```{r q5a1}
mean(batting$HR, na.rm = TRUE)

```

```{r}
dbGetQuery(con, paste("SELECT SUM(HR)",
                      "FROM Batting"))

# The total sum of home runs from the data.

```

```{r q5a3}
sum(batting$HR)

```

```{r}
dbGetQuery(con, paste("SELECT AVG(HR)",
                      "FROM Batting",
                      "WHERE yearID >= 1990"))

# The average number of home runs with year ID above or equal to 1990.

```

```{r q5a4}
mean(batting$HR[which(batting$yearID >= 1990)], na.rm = TRUE)

```

-   **5b.** (6 points) Again, after each SQL query explain in words what is being extracted, and write one line (or two lines) of R code to get the same result using the `batting` data frame. You may use base R, `dplyr`, pipes, or whatever means you want.

```{r}
dbGetQuery(con, paste("SELECT teamID, AVG(HR)",
                      "FROM Batting",
                      "WHERE yearID >= 1991",
                      "GROUP BY teamID",
                      "LIMIT 5"))

# The 5 teams with the highest average number of home runs, but only members with year
# ID equal or above 1991 are being considered.

```

```{r q5b1}
data.frame(head(summarize(group_by(subset(batting, yearID >= 1991), teamID), 
                          AVGHR = mean(HR)), 5))

```

```{r}
dbGetQuery(con, paste("SELECT teamID, yearID, AVG(HR)",
                      "FROM Batting",
                      "WHERE yearID == 1991 OR yearID == 1992",
                      "GROUP BY teamID, yearID",
                      "ORDER BY AVG(HR) DESC",
                      "LIMIT 15"))

# The teamID, yearID, and average number of home runs of the 15 teams with the highest 
# average number of home runs, but the average home runs refer to the home runs done by
# members with yearID 1991 or 1992 of each team separately.

```

```{r q5b3}
data.frame(head(arrange(summarize(group_by(subset(batting, yearID == 1991 | yearID == 1992), 
                                teamID, yearID), AVGHR = mean(HR)), desc(AVGHR)), 15))

```

# Q6. More practice with computations (12 points)

-   **6a.** (4 points) Use a SQL query on the "Batting" table to calculate each player's average number of hits (`H`) over all years they played, and display the players with the 10 highest hit averages, along with their hit averages. Hint: `AVG()`, `GROUP BY`, `ORDER BY`.

```{r q6a}
dbGetQuery(con, paste("SELECT playerID, AVG(H)",
                      "FROM Batting",
                      "GROUP BY playerID",
                      "ORDER BY AVG(H) DESC",
                      "LIMIT 10"))

```

-   **6b.** (4 points) Calculate the same as in the last question, but now display all players whose hit averages are above 170. Hint: `HAVING`.

```{r q6b}
dbGetQuery(con, paste("SELECT playerID, AVG(H)",
                      "FROM Batting",
                      "GROUP BY playerID",
                      "HAVING AVG(H) > 170",
                      "ORDER BY AVG(H) DESC"))

```

-   **6c.** (4 points) Calculate the same as in the last question, but now display for all players with hit averages above 170. And ,also display the last year in which each player played.

```{r q6c}
dbGetQuery(con, paste("SELECT playerID, AVG(H), MAX(yearID)",
                      "FROM Batting",
                      "GROUP BY playerID",
                      "HAVING AVG(H) > 170",
                      "ORDER BY AVG(H) DESC"))

```

# Q7. Practice with SQL join operations (15 points)

-   **7a.** (3 points) Using `JOIN`, merge the "Batting" and "Salaries" tables based on matching the `yearID`, `playerID` pairs. Display the year, player, salary, and number of hits for the first 10 records.

```{r q7a}
dbGetQuery(con, paste("SELECT yearID, playerID, salary, H",
                      "FROM Batting JOIN Salaries USING(yearID, playerID)",
                      "ORDER BY playerID",
                      "LIMIT 10"))

```

-   **7b.** (3 points) Building off of the code from the end of lecture, which does something similar, compute the average salaries for the players with the top 10 highest hit averages.

```{r q7b}
dbGetQuery(con, paste("SELECT playerID, AVG(H), AVG(salary)",
                      "FROM Batting JOIN Salaries USING(playerID, yearID)",
                      "GROUP BY playerID",
                      "ORDER BY AVG(H) DESC",
                      "LIMIT 10"))

```

-   **7c.** (3 points) Compute the hit averages for the players with the top 10 highest salaries. Hint: this should only require a very small tweak to the code you wrote for the last question.

```{r q7c}
dbGetQuery(con, paste("SELECT playerID, AVG(H), AVG(salary)",
                      "FROM Batting JOIN Salaries USING(playerID, yearID)",
                      "GROUP BY playerID",
                      "ORDER BY AVG(salary) DESC",
                      "LIMIT 10"))

```

-   **7d.** (3 points) Using the "Fielding" table, list the 10 best (lowest) number of errors (`E`) committed by a player in a season, only considering the year 1990 and later. In addition to the number of errors, list the year and player ID for each record.

```{r q7d}
dbGetQuery(con, paste("SELECT playerID, yearID, E",
                      "FROM Fielding",
                      "WHERE yearID >= 1990",
                      "ORDER BY E, playerID",
                      "LIMIT 10"))

```

-   **7e.** (3 points) By appropriately merging the "Fielding" and "Salaries" tables, list the salaries for each record that you extracted in the last question. Then, answer the following question: what was the highest salary paid to a player who made at least 25 errors in a season, before 1990?

```{r q7e}
dbGetQuery(con, paste("SELECT playerID, yearID, E, salary",
                      "FROM Fielding JOIN Salaries USING(playerID, yearID)",
                      "WHERE yearID >= 1990",
                      "ORDER BY E, playerID",
                      "LIMIT 10"))

dbGetQuery(con, paste("SELECT playerID, yearID, E, salary",
                      "FROM Fielding JOIN Salaries USING(playerID, yearID)",
                      "WHERE yearID < 1990 AND E >= 25",
                      "ORDER BY salary DESC",
                      "LIMIT 10"))

# 1050000

```
